var documenterSearchIndex = {"docs":
[{"location":"r01-layouts.html#Layouts-1","page":"UI Layouts","title":"Layouts","text":"","category":"section"},{"location":"r01-layouts.html#Sidebar-layouts-1","page":"UI Layouts","title":"Sidebar layouts","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"Sidebar layouts split the page into one-third (for a control panel) and two-thirds (for the output). Each third is displayed in a card to visually separate it.","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"sidebar_layout\nside_panel\nmain_panel","category":"page"},{"location":"r01-layouts.html#Matte.sidebar_layout","page":"UI Layouts","title":"Matte.sidebar_layout","text":"sidebar_layout(leftpanel, rightpanel)\n\nCreate a side bar layout for your app: a 1/3 width control panel and a 2/3 width main/output panel.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.side_panel","page":"UI Layouts","title":"Matte.side_panel","text":"side_panel(content...)\n\nA narrow/side control (1/3 width) panel to be embedded in a sidebar_layout\n\nShould only be used as part of a sidebar_layout\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.main_panel","page":"UI Layouts","title":"Matte.main_panel","text":" main_panel(content...)\n\nA main (2/3 width) panel to be embedded in a sidebar_layout\n\nShould only be used as part of a sidebar_layout\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Tab-panel-layout-1","page":"UI Layouts","title":"Tab panel layout","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"Layout with pages/panels controlled by a tab bar.","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"tabs_layout\ntab_panel","category":"page"},{"location":"r01-layouts.html#Matte.tabs_layout","page":"UI Layouts","title":"Matte.tabs_layout","text":"tabs_layout(tabs...; vertical = false)\n\nCreate a tab layout â€“ app (or inset) with pages that can be navigated to using a series of tabs\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.tab_panel","page":"UI Layouts","title":"Matte.tab_panel","text":"tab_panel(title, content)\n\nDefine a panel for use in a tab layout\n\ntab_panel should only be used as input to a tabs_layout\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Control-panel-in-the-footer-1","page":"UI Layouts","title":"Control panel in the footer","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"footer_control_layout\ncontent_panel\ncontrol_panel","category":"page"},{"location":"r01-layouts.html#Matte.footer_control_layout","page":"UI Layouts","title":"Matte.footer_control_layout","text":"footer_control_layout(main_panel, control_panel)\n\nCreates a footer control layout, with a sticky/fixed-position footer at the bottom containing the controls for the app, and the main content at the top.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.content_panel","page":"UI Layouts","title":"Matte.content_panel","text":"content_panel(content...)\n\nCreate the main content panel for your footer_control_layout. Should only be used as an input to footer_control_layout.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.control_panel","page":"UI Layouts","title":"Matte.control_panel","text":"control_panel(content...)\n\nCreate the control panel for your footer_control_layout. Should only be used as an input to footer_control_layout.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"Similar to a sidebar_layout except that the control panel appears at the bottom, underneath the main content/output of your app.","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"note: Note\n","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"The layout of footer_control_layout isn't working for apps with large amounts of content   in the content_panel; the control panel obscures scrolling down.","category":"page"},{"location":"r01-layouts.html#Custom-layouts-1","page":"UI Layouts","title":"Custom layouts","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"Functions to create custom flexgrid layouts using Vuetify's built-in container layout.","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"custom_grid_layout\ncustom_grid_row\ncustom_grid_column\ncustom_card","category":"page"},{"location":"r01-layouts.html#Matte.custom_grid_layout","page":"UI Layouts","title":"Matte.custom_grid_layout","text":"custom_grid_layout(content...)\n\nCreate a container to contain a custom layout.\n\nContainers embed rows (which embed columns) to create layouts.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.custom_grid_row","page":"UI Layouts","title":"Matte.custom_grid_row","text":"custom_grid_row(content...)\n\nCreate a row for a custom layout\n\nRows wrap columns.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.custom_grid_column","page":"UI Layouts","title":"Matte.custom_grid_column","text":"custom_grid_column(content...; width = 12)\n\nCreate a layout column that covers width/12 of the row\n\nColumns must be contained in rows (custom_grid_row)\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.custom_card","page":"UI Layouts","title":"Matte.custom_card","text":"custom_card(content...)\n\nCreate a 'card' to contain content. Cards are boxes with drop shadows.\n\nFor use in custom_grid_layouts, to define sections of the page inside a column\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Customising-look-and-feel-1","page":"UI Layouts","title":"Customising look and feel","text":"","category":"section"},{"location":"r01-layouts.html#Customer-header-1","page":"UI Layouts","title":"Customer header","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"header","category":"page"},{"location":"r01-layouts.html#Matte.header","page":"UI Layouts","title":"Matte.header","text":"header(content, color, dark)\n\nDefine a custom app bar header. content should be html that will be included inside the <v-app-bar> tag. See Vuetify documentation for more information (or a simple example is included in the Matte documentation).\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"The header function allows you to define your own, custom HTML, header. The content in a header is wrapped inside a <v-app-bar> tag. You can include any valid elements inside a <v-app-bar> that are understood by Vuetify. This gives you a lot of flexibility, but has a steeper learning curve. As an example, here's how to add a title and some navigation icons to your custom header:","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"function ui() {\n  header(\n    \"<v-toolbar-title>Page title</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-btn icon>\n        <v-icon>mdi-heart</v-icon>\n      </v-btn>\n      <v-btn icon>\n        <v-icon>mdi-magnify</v-icon>\n      </v-btn>\",\n    \"deep-purple accent-4\",\n    true  \n  )\n}","category":"page"},{"location":"r01-layouts.html#Custom-footer-1","page":"UI Layouts","title":"Custom footer","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"footer","category":"page"},{"location":"r01-layouts.html#Matte.footer","page":"UI Layouts","title":"Matte.footer","text":"footer(content, bgcolor = \"grey lighten-4\")\n\nAdd a footer to your UI, containing content. If you need to include multiple elements inside content, wrap them as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Other-UI-elements-and-controlling-your-app's-style-1","page":"Controlling style","title":"Other UI elements and controlling your app's style","text":"","category":"section"},{"location":"r04-ui-style.html#Basic-text-formatting-1","page":"Controlling style","title":"Basic text formatting","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"p\nh1\nh2\nh3\nbr","category":"page"},{"location":"r04-ui-style.html#Matte.p","page":"Controlling style","title":"Matte.p","text":"p(contents)\n\nWrap some text in a paragraph tag. Helps with layout of raw text.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.h1","page":"Controlling style","title":"Matte.h1","text":"h1(contents...)\n\nShow contents as a level 1 heading\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.h2","page":"Controlling style","title":"Matte.h2","text":"h2(contents...)\n\nShow contents as a level 2 heading\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.h3","page":"Controlling style","title":"Matte.h3","text":"h3(contents...)\n\nShow contents as a level 3 heading\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.br","page":"Controlling style","title":"Matte.br","text":"br()\n\nInsert a line break (html <br>) into your UI\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Layout-elements-1","page":"Controlling style","title":"Layout elements","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"divider","category":"page"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"Works well with lists.","category":"page"},{"location":"r04-ui-style.html#Conditionally-showing-UI-1","page":"Controlling style","title":"Conditionally showing UI","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"show_if\nhide_if","category":"page"},{"location":"r04-ui-style.html#Matte.show_if","page":"Controlling style","title":"Matte.show_if","text":"show_if(id, content...)\n\nCreate a span that only shows content if the variable id is true. As with all Matte logic id should be a function defined in the Server module of your app.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.hide_if","page":"Controlling style","title":"Matte.hide_if","text":"hide_if(id, content...)\n\nCompanion to show_if. Creates a span that only shows content if the variable id is false. As with all Matte logic id should be a function defined in the Server module of your app.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"expansion_panel\nexpansion_panel_list","category":"page"},{"location":"r04-ui-style.html#Matte.expansion_panel","page":"Controlling style","title":"Matte.expansion_panel","text":"expansion_panel(header, content)\n\nCreate an expansion panel with that appears as header in the list and can expanded to also show content\n\nShould only be used inside an expansion_panel_list\n\nIf you need to include multiple elements inside header or content, wrap them as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.expansion_panel_list","page":"Controlling style","title":"Matte.expansion_panel_list","text":"expansion_panel_list(items...)\n\nCreate a list of expansion panel items. items should only be a set of expansion_panels\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Notifying-users-of-events-1","page":"Controlling style","title":"Notifying users of events","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"dialog\nsnackbar","category":"page"},{"location":"r04-ui-style.html#Matte.dialog","page":"Controlling style","title":"Matte.dialog","text":"dialog(id, title, content, width = 500)\n\nDisplay a dialog box (which pops over the rest of the content, forcing user acknowledgement). Visibility is controlled by id. A common use case is to define this output function to have sole input from a button, and simply return whether the button has been clicked.\n\ntitle and content can be dynamically set.\n\nIf you need to include multiple elements inside content, wrap them as a tuple.\n\nnote: Note\nFor best results dialogs should be placed at the end of your UI, after the layout. Placing them inside a layout can cause them to be hidden.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.snackbar","page":"Controlling style","title":"Matte.snackbar","text":"snackbar(id, content; color = \"error\", width = 500)\n\nDisplay a snackbar at the bottom of the page to notify users of events or other info. Visibility of the snackbar is controlled by id, which should be a boolean. A common use case is to define this output function to have sole input from a button, and simply return whether the button has been clicked.\n\ncontent can be dynamically set. Snackbars are small, so you should only include (raw) text i.e. (text_output) in the content, not other UIElements.\n\nIf you need to include multiple elements inside content, wrap them as a tuple.\n\nSnackbars automatically close based on the timeout set (in milliseconds). Set to 0 to keep open indefinitely.\n\nnote: Note\nFor best results snackbars should be placed at the end of your UI, after the layout. Placing them inside a layout can cause them to be hidden.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Providing-info-to-users-1","page":"Controlling style","title":"Providing info to users","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"circular_loader\ntooltip","category":"page"},{"location":"r04-ui-style.html#Matte.circular_loader","page":"Controlling style","title":"Matte.circular_loader","text":"circular_loader(; width = 3, color = \"primary\")\n\nAdd a circular spinning loading animation to your UI. Best wrapped in a show_if so you can hide it once the relevant content has finished loading.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.tooltip","page":"Controlling style","title":"Matte.tooltip","text":"tooltip(content, tip)\n\nAdd a mouseover-activated tooltip to the UI elements contained in content. Works best for small elements like buttons.\n\nIf you need to include multiple elements inside content, wrap them as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"g02-intro.html#The-basics-1","page":"Introduction to Matte","title":"The basics","text":"","category":"section"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Matte apps comprise three key elements:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"A module that defines the app\nA function that creates the UI\nA module that defines the server-side logic","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Matte has a simple logic: each function in the server becomes an output in the UI. You access the output from these functions by using the function name as the id for output elements in the UI. Inputs work similarly: you assign each input in the UI an id; this value can be used as an input to a function in the server module.","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Let's make this concrete with an example. Suppose we want to create an app that adds two numbers specified by our users. We define in our server module:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"function my_add(number1, number2)\n  number1 + number2\nend","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"This relationship is expressed in our app accordingly:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"image here","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"number1 and number2 are the unique IDs for inputs in our UI. We access these in our function by name. The output from that calculation, called my_add in our server, is accessed by name as well, and rendered as a text_output.","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Outputs are only recalculated when (at least) one of their inputs change.","category":"page"},{"location":"g02-intro.html#Defining-an-App-module-1","page":"Introduction to Matte","title":"Defining an App module","text":"","category":"section"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"All Matte apps are defined as modules. The modules must contain three things:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"A const String called title that defines the app title.\nA function called ui that defines (and returns!) the ui\nA sub-module called server","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"You can structure this module however you like: it can be one file (like the hello_world example), or split across many. There are no restrictions on the name of the app module. The module can import packages; as with any Julia project, these just need to be added using the package manager.","category":"page"},{"location":"g02-intro.html#Running-an-app-1","page":"Introduction to Matte","title":"Running an app","text":"","category":"section"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Starting a Matte app is done using run_app. This takes the module as it's only compulsory argument.","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"By default, Matte runs asynchronously, so that you can still use the REPL while the server runs in the background. If you want to stop your app without killing your REPL, just run:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"stop_app()","category":"page"},{"location":"g02-intro.html#Revise-1","page":"Introduction to Matte","title":"Revise","text":"","category":"section"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Use Revise! With Revise, you can edit your app module (if you includet it) and changes will be reflected in the running app. Otherwise, you need to redefine the module everytime you make changes and re-launch your app.","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Use Revise!","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"In the next tutorial, we'll look at the basics of building a UI in Matte.","category":"page"},{"location":"r06-side-effects.html#Side-effects-/-manually-pushing-updates-to-the-UI-1","page":"Changing the UI from server functions","title":"Side effects / manually pushing updates to the UI","text":"","category":"section"},{"location":"r06-side-effects.html#","page":"Changing the UI from server functions","title":"Changing the UI from server functions","text":"update_output","category":"page"},{"location":"r06-side-effects.html#Matte.update_output","page":"Changing the UI from server functions","title":"Matte.update_output","text":"ui_update(id, value, session)\n\nManually update a UI variable/element id to value. Use inside server-side functions for other outputs when you want calculations to have side effects in the UI.\n\nsession is the optional session argument to server-side functions that provides stateful variables. See the guide on server-side state for more information.\n\n\n\n\n\n","category":"function"},{"location":"r03-output-elements.html#Output-elements-1","page":"Output elements","title":"Output elements","text":"","category":"section"},{"location":"r03-output-elements.html#","page":"Output elements","title":"Output elements","text":"text_output\ndatatable_output\nplots_output","category":"page"},{"location":"r03-output-elements.html#Matte.text_output","page":"Output elements","title":"Matte.text_output","text":"text_output(id)\n\nRender the output from the server as raw text.\n\nThis is best used with a formatting tag (such as p() or heading h1() etc)\n\n\n\n\n\n","category":"function"},{"location":"r03-output-elements.html#Matte.datatable_output","page":"Output elements","title":"Matte.datatable_output","text":"datatable_output(id::AbstractString; rows_per_page::Integer\n\nRender a table of data in your UI. The function id in your Server module should return a table that is a subtype of either AbstractDataFrame or Table (from Tables.jl).\n\n\n\n\n\n","category":"function"},{"location":"r03-output-elements.html#Matte.plots_output","page":"Output elements","title":"Matte.plots_output","text":"plots_output(id)\n\nRender a plot. Supports plots created by the Plots package.\n\nPlots are slow to render, and so should not be directly hooked up to inputs that rapidly request updates to the server â€“ like sliders. If you wish to use these input types, add a button to refresh the plot input and only return the plot when that is true (otherwise return nothing).\n\n\n\n\n\n","category":"function"},{"location":"r05-server-side-state.html#server-side-state-1","page":"Variables with 'state'","title":"Server-side state","text":"","category":"section"},{"location":"r05-server-side-state.html#","page":"Variables with 'state'","title":"Variables with 'state'","text":"register_session_vars","category":"page"},{"location":"r05-server-side-state.html#","page":"Variables with 'state'","title":"Variables with 'state'","text":"session","category":"page"},{"location":"g04-guide-server.html#Key-element-3:-Server-side-logic-1","page":"Server logic","title":"Key element 3: Server-side logic","text":"","category":"section"},{"location":"g04-guide-server.html#","page":"Server logic","title":"Server logic","text":"Server side logic is contained in a module that must be called Server, as a sub-module of your app module.","category":"page"},{"location":"g04-guide-server.html#","page":"Server logic","title":"Server logic","text":"Each function in the server module represents an output variable that can be rendered in your UI. These functions take as inputs variables whose names must correspond to input variables in your UI (i.e. the ids of your various input elements.","category":"page"},{"location":"g04-guide-server.html#","page":"Server logic","title":"Server logic","text":"In our hello_world app, we have only one output variable called my_output. It takes a single argument, my_input. In our UI, my_input is the id for the text input. As it stands, this function is pretty boring. It just returns whatever is in the text input. Let's make it a bit more exciting, by having it replace any 'a' it finds with a 'b'. Replace the definition of my_output with the following:","category":"page"},{"location":"g04-guide-server.html#","page":"Server logic","title":"Server logic","text":"function my_output(my_input)\n  replace(my_input, \"a\" => \"b\")\nend","category":"page"},{"location":"g04-guide-server.html#","page":"Server logic","title":"Server logic","text":"Go back to your browser, refresh the page, and try out the new text input.","category":"page"},{"location":"g03-guide-ui.html#guide-ui-1","page":"Building UIs","title":"Building a UI","text":"","category":"section"},{"location":"g01-getting-started.html#getting-started-1","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"g01-getting-started.html#Installation-1","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"Matte is not yet registered in the julia general repository. To install the latest release run the following from the Pkg repl (type ] to get there):","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"pkg> add https://github.com/angusmoore/Matte.jl.git#v0.1.0","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"You can install the latest development version by removing the #v0.1.0.","category":"page"},{"location":"g01-getting-started.html#Creating-your-first-app-1","page":"Getting started","title":"Creating your first app","text":"","category":"section"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"Matte comes with a number of example apps to demonstrate how it works. Let's start with the hello_world example.","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"Open Julia and create a new Matte app, and populate it with the included hello_world app by running:","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"julia> using Matte\njulia> matte_example(\"hello_world\", \"path/to/example\")","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"where path/to/example is an empty folder where you want to create the new app. Matte will create a new project at that location. Change your working directory to that location:","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"julia> cd(\"path/to/example\")","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"and open up the folder in your favourite editor. There are two files that Matte has created: app.jl and a Project.toml.  Project.toml is a standard project file for Julia's package manager, for specifying your app's dependencies. app.jl (unsurprisingly!) is the app. It defines the server-side logic, and the UI. Open that file in your favourite editor. It should look like this:","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"module HelloWorldApp\n\nusing Matte\n\nconst title = \"Hello World\"\n\nfunction ui()\n    sidebar_layout(\n        side_panel(\n            h1(\"Hello World!\"),\n            text_input(\"my_input\", \"Input some text\")\n        ),\n        main_panel(\n            h1(\"You wrote:\"),\n            p(text_output(\"my_output\"))\n        )\n    )\nend\n\nmodule Server\n\nfunction my_output(my_input)\n    my_input\nend\n\nend\n\nend","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"The next guide will dig in to what makes a Matte app and how they work. But before we do that, let's run the app. First we need to activate the project, and load Revise (so that can make changes to our app without having to restart. You don't have to use Revise. But you should!):","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"pkg> activate .\njulia> using Revise\njulia> includet(\"hello_world.app\")\njulia> run_app(HelloWorldApp)","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"Open your favourite web browser and visit http://localhost:8000. After a few seconds you should see a simple webpage that looks like this: (Image: Hello world screenshot)","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"You can type some text on the left, and it will appear on the right. Not very exciting, but it's our first Matte app!","category":"page"},{"location":"r07-running-creating.html#Running-and-creating-apps-1","page":"Running and creating Matte apps","title":"Running and creating apps","text":"","category":"section"},{"location":"r07-running-creating.html#Run-1","page":"Running and creating Matte apps","title":"Run","text":"","category":"section"},{"location":"r07-running-creating.html#","page":"Running and creating Matte apps","title":"Running and creating Matte apps","text":"run_app\nstop_app","category":"page"},{"location":"r07-running-creating.html#Matte.run_app","page":"Running and creating Matte apps","title":"Matte.run_app","text":"run_app(app; async = true)\n\nTheapp module that defines your app must have a function called ui that defines the UI. The functions in the module (which don't need to be exported) define the logic for your app. The name of the function is the name of the outputs in your UI, and the inputs to those functions correspond to the ids of inputs in the UI.\n\nSee the getting started guide for help on how to define your app.\n\n\n\n\n\n","category":"function"},{"location":"r07-running-creating.html#Matte.stop_app","page":"Running and creating Matte apps","title":"Matte.stop_app","text":"stop_app()\n\nStops a running server that was started with async=true\n\n\n\n\n\n","category":"function"},{"location":"r07-running-creating.html#Helpers-to-create-apps-1","page":"Running and creating Matte apps","title":"Helpers to create apps","text":"","category":"section"},{"location":"r07-running-creating.html#","page":"Running and creating Matte apps","title":"Running and creating Matte apps","text":"new_matte_app\nmatte_example","category":"page"},{"location":"r07-running-creating.html#Matte.new_matte_app","page":"Running and creating Matte apps","title":"Matte.new_matte_app","text":"new_matte_app(path; force = false, activate = true)\n\nCreate a new skeleton Matte app in the folder path. The folder should be empty. Matte will create the final folder if it doesn't exist, but will fail if the rest of the path doesn't exist.\n\npath should be a folder that doesn't exist. If it doesnt, you can use force = true to overwrite. activate controls whether the helper will activate the project for the newly created app.\n\n\n\n\n\n","category":"function"},{"location":"r07-running-creating.html#Matte.matte_example","page":"Running and creating Matte apps","title":"Matte.matte_example","text":"matte_example(example, path; force = false, activate = true)\n\nCreate a new Matte app, based on the example specified by example. See the manual for a list of examples that you can use here.\n\npath should be a folder that doesn't exist. If it doesnt, you can use force = true to overwrite. activate controls whether the helper will activate the project for the newly created app.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Input-elements-1","page":"Input elements","title":"Input elements","text":"","category":"section"},{"location":"r02-input-elements.html#Text-input-1","page":"Input elements","title":"Text input","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"text_input","category":"page"},{"location":"r02-input-elements.html#Matte.text_input","page":"Input elements","title":"Matte.text_input","text":"text_input(id, label; default = \"\")\n\nFree text field for string input by users\n\nNote that a text input always returns a String to the server. If you need users to be able to freely enter a number, use number_input.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Numeric-inputs-1","page":"Input elements","title":"Numeric inputs","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"number_input\nslider","category":"page"},{"location":"r02-input-elements.html#Matte.number_input","page":"Input elements","title":"Matte.number_input","text":"number_input(id, label; default = 0)\n\nForm input that only accepts numbers\n\nNote that number_input always returns a float to the server. If you need a string use text_input. If you need integers, you can use a slider or round the result.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.slider","page":"Input elements","title":"Matte.slider","text":"slider(id, label, min, max; default = Int(round((max + min) / 2))\n\nInput element that allows users to select among a set of integers using a slider\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"number_input provides more flexibility, as sliders can only offer integers.","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"note: Note\nnumber_input will return an empty string if the user deletes all of the digits in the input box. This may cause your server-side functions to fail if they assume a number will be returned.","category":"page"},{"location":"r02-input-elements.html#Selecting-among-options-1","page":"Input elements","title":"Selecting among options","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"selector\nradio\nswitch\ncheckbox\nlist\nlist_item","category":"page"},{"location":"r02-input-elements.html#Matte.selector","page":"Input elements","title":"Matte.selector","text":"function selector(id, label, items; multiple = false, autocomplete = false)\n\nCreate a selection box in your UI for users to choose among options. Allow multiple selections with multiple. Let users type in the box to filter options by setting autocomplete to true. items can either be a string for a static (javascript) array of options (i.e. \"['a first option', 'the second option']\") or an id that corresponds to a function in your Server that returns an array of options (potentially dynamically).\n\nReturns either an Array (if no or multiple elements are selected) or the type of the individual element if only one is selected. The type that is returned depends on the types of the elements in the select list.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.radio","page":"Input elements","title":"Matte.radio","text":"radio(id, values, labels)\n\nGive users a set of options to choose from (exclusively).\n\nUnlike a select, all radio options are displayed (not a drop down list), and cannot be dynamic.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.switch","page":"Input elements","title":"Matte.switch","text":"switch(id, label; default = false)\n\nAdd a switch that returns true or false based on whether it is turned on.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.checkbox","page":"Input elements","title":"Matte.checkbox","text":"checkbox(id, label; default = false)\n\nAdd a checkbox that returns true or false based on whether it is ticked.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.list","page":"Input elements","title":"Matte.list","text":"function list(id, items...; title = nothing)\n\nCreate a list of items for users to choose from. items... should be populated with list_items.\n\ntitle is optional; if specified it provides a grey title at the top of the list.\n\nThe selected list item is returned to the server as a zero-based index.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.list_item","page":"Input elements","title":"Matte.list_item","text":"list_item(title, subtitle = nothing)\n\nShould only be used as part of a list\n\nsubtitle is optional. It provides more detail in a smaller font beneath the main item.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Dynamically-setting-the-options-in-a-selector-1","page":"Input elements","title":"Dynamically setting the options in a selector","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"By setting the item argument to an id, Matte will fetch the items from the server. This can be used to create dynamic selections, where the options in the list depend on the values of other inputs. The example dynamic_select shows how this works (create it by running matte_example(\"dynamic_select\")).","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"In the UI, we define a selector, which has items defined by dynamic_items:","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"selector(\"main_select\", \"Choose a subgroup\", \"dynamic_items\")","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"And we define another selector called first_select that will determine what shows up in dynamic_items, but has static options:","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"selector(\"first_select\", \"Select First Option:\", \"['Group #1', 'Group #2']\")","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"We then define a function in the Server module in the app called dynamic_items","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"function dynamic_items(first_select)\n  if (first_select == \"Group #1\")\n    [\"Subgroup 1.$i\" for i in 1:10]\n  elseif (first_select == \"Group #2\")\n    [\"Subgroup 2.$i\" for i in 1:10]\n  else\n    [\"No group selected\"]\n  end\nend","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"Now, when users make a selection of a group in the first select, the options in the second select will reflect that choice.","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"This pattern can be applied to create complex chains of dependent selects.","category":"page"},{"location":"r02-input-elements.html#Dates-and-times-1","page":"Input elements","title":"Dates and times","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"date_picker\ntime_picker","category":"page"},{"location":"r02-input-elements.html#Matte.date_picker","page":"Input elements","title":"Matte.date_picker","text":"date_picker(id::AbstractString; color::AbstractString = \"primary\")\n\nAdd a date picker to your UI. Date is returned as a String in ISO 8601 form (YYYY-MM-DD)\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.time_picker","page":"Input elements","title":"Matte.time_picker","text":"time_picker(id; color = \"primary\", default = nothing)\n\nAdd a clock time picker to your UI. Time is returned as a String, in HH:MM 24 hour format. Returns nothing if user has not yet picked a time.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Buttons-1","page":"Input elements","title":"Buttons","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"floating_action_button\nbutton","category":"page"},{"location":"r02-input-elements.html#Matte.floating_action_button","page":"Input elements","title":"Matte.floating_action_button","text":"floating_action_button(id, label; location = \"bottom right\", color = \"red\")\n\nAdd a floating action button to your UI at location\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.button","page":"Input elements","title":"Matte.button","text":"button(id, label; color, size)\n\nAdd a button to a UI. Buttons return true to the server when clicked, and false otherwise.\n\nsize can be one of x-small, small, normal, large, x-large color can be any valid color (see docs on colors for a full list) - e.g. primary, error, teal etc\n\n\n\n\n\n","category":"function"},{"location":"index.html#Matte-1","page":"Matte","title":"Matte","text":"","category":"section"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Matte is a julia library for creating julia-powered dashboards, inspired by Google's material design. Matte makes it easy to convert your existing julia code into a beautiful and powerful dashboard for end users. Matte is easy to use, fast, and powerful.","category":"page"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Please note: Matte is new and is still highly experimental.","category":"page"},{"location":"index.html#Examples-1","page":"Matte","title":"Examples","text":"","category":"section"},{"location":"index.html#Support,-bugs,-and-planned-features-1","page":"Matte","title":"Support, bugs, & planned features","text":"","category":"section"},{"location":"index.html#","page":"Matte","title":"Matte","text":"General support for help with usage and troubleshooting is best directed to the julialang discourse.","category":"page"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Please report any bugs you find on the github issue tracker. Feature requests can be logged there too.","category":"page"},{"location":"index.html#Acknowledgements-1","page":"Matte","title":"Acknowledgements","text":"","category":"section"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Matte is made possible by a range of excellent julia and javascript open source libraries. Of particular note: Genie.jl, Vuetify and Vue.js.","category":"page"}]
}
