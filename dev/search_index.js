var documenterSearchIndex = {"docs":
[{"location":"g05a-dataframes.html#g05a-dataframes-1","page":"DataFrames","title":"Displaying DataFrames","text":"","category":"section"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"This guide looks at embedding and displaying DataFrames in your Matte app.","category":"page"},{"location":"g05a-dataframes.html#Example-app-and-data-1","page":"DataFrames","title":"Example app and data","text":"","category":"section"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"This guide will use the built-in example app called iris. Create a copy locally to work on by running:","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"matte_example(\"iris\", \"iris\")","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"which will create the example in a new folder called iris. You can change the second argument to change the path where the example is created.","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"We will use the iris dataset from the RDatasets package. This is imported at the top of the Server module:","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"module Server\n\nusing RDatasets\niris = dataset(\"datasets\", \"iris\")\n\n...\n\nend","category":"page"},{"location":"g05a-dataframes.html#Incorporating-a-DataFrame-in-your-UI-1","page":"DataFrames","title":"Incorporating a DataFrame in your UI","text":"","category":"section"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"Matte has a built-in way to display tables of data in your app: the datatable_output This takes a single argument, which is the id of the output (which, of course, corresponds to a function in the Server module).","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"You can see this element in the main_panel of the provided example:","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"function ui()\nsidebar_layout(\n      side_panel(\n          ...\n      ),\n      main_panel(\n          ...\n          datatable_output(\"iris_df\")\n      )\n  )\nend","category":"page"},{"location":"g05a-dataframes.html#DataFrames-on-the-backend-1","page":"DataFrames","title":"DataFrames on the backend","text":"","category":"section"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"As with all Matte outputs elements, we need a function in the Server module called iris_df, since this is the id we gave to datatable_output. This function should return a DataFrame (or any other Tables.jl compatible type).","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"In the included example, we are using an input variable called species to filter the iris dataset. This isn't particularly interesting, but provides a little interactivity for the example.","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"function iris_df(species)\n    if species != nothing\n        iris[iris.Species .== species, Not(:Species)]\n    else\n        nothing\n    end\nend","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"This function simply returns a DataFrame, or, if the user hasn't yet selected a species to filter by, nothing.[1]","category":"page"},{"location":"g05a-dataframes.html#Trying-it-out-1","page":"DataFrames","title":"Trying it out","text":"","category":"section"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"Run the app (by include/includeting the app.jl file and running run_app(IrisApp)). Once you select a species to filter by, you'll see something like this:","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"(Image: )","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"The data table in the UI is interactive – you can sort by columns – and limits the number of printed rows to improve user experience.","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"In the next guide we'll look at the other way to present data to your users: plotting!","category":"page"},{"location":"g05a-dataframes.html#","page":"DataFrames","title":"DataFrames","text":"[1]: A return result of nothing tells Matte not to update the UI.","category":"page"},{"location":"r01-layouts.html#r01-layouts-1","page":"UI Layouts","title":"Layouts","text":"","category":"section"},{"location":"r01-layouts.html#Sidebar-layouts-1","page":"UI Layouts","title":"Sidebar layouts","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"Sidebar layouts split the page into one-third (for a control panel) and two-thirds (for the output). Each third is displayed in a card to visually separate it.","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"sidebar_layout\nside_panel\nmain_panel","category":"page"},{"location":"r01-layouts.html#Matte.sidebar_layout","page":"UI Layouts","title":"Matte.sidebar_layout","text":"sidebar_layout(leftpanel, rightpanel)\n\nCreate a side bar layout for your app: a 1/3 width control panel and a 2/3 width main/output panel.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.side_panel","page":"UI Layouts","title":"Matte.side_panel","text":"side_panel(content...)\n\nA narrow/side control (1/3 width) panel to be embedded in a sidebar_layout\n\nShould only be used as part of a sidebar_layout\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.main_panel","page":"UI Layouts","title":"Matte.main_panel","text":" main_panel(content...)\n\nA main (2/3 width) panel to be embedded in a sidebar_layout\n\nShould only be used as part of a sidebar_layout\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Tab-panel-layout-1","page":"UI Layouts","title":"Tab panel layout","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"Layout with pages/panels controlled by a tab bar.","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"tabs_layout\ntab_panel","category":"page"},{"location":"r01-layouts.html#Matte.tabs_layout","page":"UI Layouts","title":"Matte.tabs_layout","text":"tabs_layout(tabs...; vertical = false)\n\nCreate a tab layout – app (or inset) with pages that can be navigated to using a series of tabs\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.tab_panel","page":"UI Layouts","title":"Matte.tab_panel","text":"tab_panel(title, content)\n\nDefine a panel for use in a tab layout\n\ntab_panel should only be used as input to a tabs_layout\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Control-panel-in-the-footer-1","page":"UI Layouts","title":"Control panel in the footer","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"footer_control_layout\ncontent_panel\ncontrol_panel","category":"page"},{"location":"r01-layouts.html#Matte.footer_control_layout","page":"UI Layouts","title":"Matte.footer_control_layout","text":"footer_control_layout(main_panel, control_panel)\n\nCreates a footer control layout, with a sticky/fixed-position footer at the bottom containing the controls for the app, and the main content at the top.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.content_panel","page":"UI Layouts","title":"Matte.content_panel","text":"content_panel(content...)\n\nCreate the main content panel for your footer_control_layout. Should only be used as an input to footer_control_layout.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.control_panel","page":"UI Layouts","title":"Matte.control_panel","text":"control_panel(content...)\n\nCreate the control panel for your footer_control_layout. Should only be used as an input to footer_control_layout.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"Similar to a sidebar_layout except that the control panel appears at the bottom, underneath the main content/output of your app.","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"note: Note\nThe layout of footer_control_layout isn't working for apps with large amounts of content in the content_panel; the control panel obscures scrolling down.","category":"page"},{"location":"r01-layouts.html#Custom-layouts-1","page":"UI Layouts","title":"Custom layouts","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"Functions to create custom flexgrid layouts using Vuetify's built-in container layout.","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"custom_grid_layout\ncustom_grid_row\ncustom_grid_column\ncustom_card","category":"page"},{"location":"r01-layouts.html#Matte.custom_grid_layout","page":"UI Layouts","title":"Matte.custom_grid_layout","text":"custom_grid_layout(content...)\n\nCreate a container to contain a custom layout.\n\nContainers embed rows (which embed columns) to create layouts.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.custom_grid_row","page":"UI Layouts","title":"Matte.custom_grid_row","text":"custom_grid_row(content...)\n\nCreate a row for a custom layout\n\nRows wrap columns.\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.custom_grid_column","page":"UI Layouts","title":"Matte.custom_grid_column","text":"custom_grid_column(content...; width = 12)\n\nCreate a layout column that covers width/12 of the row\n\nColumns must be contained in rows (custom_grid_row)\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Matte.custom_card","page":"UI Layouts","title":"Matte.custom_card","text":"custom_card(content...)\n\nCreate a 'card' to contain content. Cards are boxes with drop shadows.\n\nFor use in custom_grid_layouts, to define sections of the page inside a column\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#Customising-look-and-feel-1","page":"UI Layouts","title":"Customising look and feel","text":"","category":"section"},{"location":"r01-layouts.html#Customer-header-1","page":"UI Layouts","title":"Customer header","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"header","category":"page"},{"location":"r01-layouts.html#Matte.header","page":"UI Layouts","title":"Matte.header","text":"header(content, color, dark)\n\nDefine a custom app bar header. content should be html that will be included inside the <v-app-bar> tag. See Vuetify documentation for more information (or a simple example is included in the Matte documentation).\n\n\n\n\n\n","category":"function"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"The header function allows you to define your own, custom HTML, header. The content in a header is wrapped inside a <v-app-bar> tag. You can include any valid elements inside a <v-app-bar> that are understood by Vuetify. This gives you a lot of flexibility, but has a steeper learning curve. As an example, here's how to add a title and some navigation icons to your custom header:","category":"page"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"function ui() {\n  header(\n    \"<v-toolbar-title>Page title</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-btn icon>\n        <v-icon>mdi-heart</v-icon>\n      </v-btn>\n      <v-btn icon>\n        <v-icon>mdi-magnify</v-icon>\n      </v-btn>\",\n    \"deep-purple accent-4\",\n    true  \n  )\n}","category":"page"},{"location":"r01-layouts.html#Custom-footer-1","page":"UI Layouts","title":"Custom footer","text":"","category":"section"},{"location":"r01-layouts.html#","page":"UI Layouts","title":"UI Layouts","text":"footer","category":"page"},{"location":"r01-layouts.html#Matte.footer","page":"UI Layouts","title":"Matte.footer","text":"footer(content, bgcolor = \"grey lighten-4\")\n\nAdd a footer to your UI, containing content. If you need to include multiple elements inside content, wrap them as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#r04-ui-style-1","page":"Controlling style","title":"Other UI elements and controlling your app's style","text":"","category":"section"},{"location":"r04-ui-style.html#Basic-text-formatting-1","page":"Controlling style","title":"Basic text formatting","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"p\nh1\nh2\nh3\nbr","category":"page"},{"location":"r04-ui-style.html#Matte.p","page":"Controlling style","title":"Matte.p","text":"p(contents)\n\nWrap some text in a paragraph tag. Helps with layout of raw text.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.h1","page":"Controlling style","title":"Matte.h1","text":"h1(contents...)\n\nShow contents as a level 1 heading\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.h2","page":"Controlling style","title":"Matte.h2","text":"h2(contents...)\n\nShow contents as a level 2 heading\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.h3","page":"Controlling style","title":"Matte.h3","text":"h3(contents...)\n\nShow contents as a level 3 heading\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.br","page":"Controlling style","title":"Matte.br","text":"br()\n\nInsert a line break (html <br>) into your UI\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Style-/-look-and-feel-1","page":"Controlling style","title":"Style / look and feel","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"divider\nicon","category":"page"},{"location":"r04-ui-style.html#Matte.divider","page":"Controlling style","title":"Matte.divider","text":"divider(; inset = false, vertical = false)\n\nCreate a thin line to separate sections of a layout. inset adds 72px of indentation to the left for horizontal dividers, and reduces max-height for vertical dividers.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.icon","page":"Controlling style","title":"Matte.icon","text":"function icon(name)\n\nAdd an icon to part of your UI. Supports material design icons. The name is the name of icon - e.g. \"home\", \"heart\", etc\n\nFor a list of available icons visit materialdesignicons.com. You can find their names by clicking on them.\n\nSize can be one of x-small, small, medium (default), large, x-large.\n\nWorks well embedded in buttons.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Conditionally-showing-UI-1","page":"Controlling style","title":"Conditionally showing UI","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"show_if\nhide_if","category":"page"},{"location":"r04-ui-style.html#Matte.show_if","page":"Controlling style","title":"Matte.show_if","text":"show_if(id, content...)\n\nCreate a span that only shows content if the variable id is true. As with all Matte logic id should be a function defined in the Server module of your app.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.hide_if","page":"Controlling style","title":"Matte.hide_if","text":"hide_if(id, content...)\n\nCompanion to show_if. Creates a span that only shows content if the variable id is false. As with all Matte logic id should be a function defined in the Server module of your app.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"expansion_panel\nexpansion_panel_list","category":"page"},{"location":"r04-ui-style.html#Matte.expansion_panel","page":"Controlling style","title":"Matte.expansion_panel","text":"expansion_panel(header, content)\n\nCreate an expansion panel with that appears as header in the list and can expanded to also show content\n\nShould only be used inside an expansion_panel_list\n\nIf you need to include multiple elements inside header or content, wrap them as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.expansion_panel_list","page":"Controlling style","title":"Matte.expansion_panel_list","text":"expansion_panel_list(items...)\n\nCreate a list of expansion panel items. items should only be a set of expansion_panels\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Notifying-users-of-events-1","page":"Controlling style","title":"Notifying users of events","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"dialog\nsnackbar","category":"page"},{"location":"r04-ui-style.html#Matte.dialog","page":"Controlling style","title":"Matte.dialog","text":"dialog(id, title, content, width = 500)\n\nDisplay a dialog box (which pops over the rest of the content, forcing user acknowledgement). Visibility is controlled by id. A common use case is to define this output function to have sole input from a button, and simply return whether the button has been clicked.\n\ntitle and content can be dynamically set.\n\nIf you need to include multiple elements inside content, wrap them as a tuple.\n\nnote: Note\nFor best results dialogs should be placed at the end of your UI, after the layout. Placing them inside a layout can cause them to be hidden.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.snackbar","page":"Controlling style","title":"Matte.snackbar","text":"snackbar(id, content; color = \"error\", width = 500)\n\nDisplay a snackbar at the bottom of the page to notify users of events or other info. Visibility of the snackbar is controlled by id, which should be a boolean. A common use case is to define this output function to have sole input from a button, and simply return whether the button has been clicked.\n\ncontent can be dynamically set. Snackbars are small, so you should only include (raw) text i.e. (text_output) in the content, not other UIElements.\n\nIf you need to include multiple elements inside content, wrap them as a tuple.\n\nSnackbars automatically close based on the timeout set (in milliseconds). Set to 0 to keep open indefinitely.\n\nnote: Note\nFor best results snackbars should be placed at the end of your UI, after the layout. Placing them inside a layout can cause them to be hidden.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Providing-info-to-users-1","page":"Controlling style","title":"Providing info to users","text":"","category":"section"},{"location":"r04-ui-style.html#","page":"Controlling style","title":"Controlling style","text":"circular_loader\ntooltip","category":"page"},{"location":"r04-ui-style.html#Matte.circular_loader","page":"Controlling style","title":"Matte.circular_loader","text":"circular_loader(; width = 3, color = \"primary\")\n\nAdd a circular spinning loading animation to your UI. Best wrapped in a show_if so you can hide it once the relevant content has finished loading.\n\n\n\n\n\n","category":"function"},{"location":"r04-ui-style.html#Matte.tooltip","page":"Controlling style","title":"Matte.tooltip","text":"tooltip(content, tip)\n\nAdd a mouseover-activated tooltip to the UI elements contained in content. Works best for small elements like buttons.\n\nIf you need to include multiple elements inside content, wrap them as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"r05-running-creating.html#Running-and-creating-apps-1","page":"Running and creating Matte apps","title":"Running and creating apps","text":"","category":"section"},{"location":"r05-running-creating.html#Run-1","page":"Running and creating Matte apps","title":"Run","text":"","category":"section"},{"location":"r05-running-creating.html#","page":"Running and creating Matte apps","title":"Running and creating Matte apps","text":"run_app\nstop_app","category":"page"},{"location":"r05-running-creating.html#Matte.run_app","page":"Running and creating Matte apps","title":"Matte.run_app","text":"run_app(app; async = true)\n\nTheapp module that defines your app must have a function called ui that defines the UI. The functions in the module (which don't need to be exported) define the logic for your app. The name of the function is the name of the outputs in your UI, and the inputs to those functions correspond to the ids of inputs in the UI.\n\nSee the getting started guide for help on how to define your app.\n\n\n\n\n\n","category":"function"},{"location":"r05-running-creating.html#Matte.stop_app","page":"Running and creating Matte apps","title":"Matte.stop_app","text":"stop_app()\n\nStops a running server that was started with async=true\n\n\n\n\n\n","category":"function"},{"location":"r05-running-creating.html#Helpers-to-create-apps-1","page":"Running and creating Matte apps","title":"Helpers to create apps","text":"","category":"section"},{"location":"r05-running-creating.html#","page":"Running and creating Matte apps","title":"Running and creating Matte apps","text":"new_matte_app\nmatte_example","category":"page"},{"location":"r05-running-creating.html#Matte.new_matte_app","page":"Running and creating Matte apps","title":"Matte.new_matte_app","text":"new_matte_app(path; force = false, activate = true)\n\nCreate a new skeleton Matte app in the folder path. The folder should be empty. Matte will create the final folder if it doesn't exist, but will fail if the rest of the path doesn't exist.\n\npath should be a folder that doesn't exist. If it doesnt, you can use force = true to overwrite. activate controls whether the helper will activate the project for the newly created app.\n\n\n\n\n\n","category":"function"},{"location":"r05-running-creating.html#Matte.matte_example","page":"Running and creating Matte apps","title":"Matte.matte_example","text":"matte_example(example, path; force = false, activate = true)\n\nCreate a new Matte app, based on the example specified by example. See the manual for a list of examples that you can use here.\n\npath should be a folder that doesn't exist. If it doesnt, you can use force = true to overwrite. activate controls whether the helper will activate the project for the newly created app.\n\n\n\n\n\n","category":"function"},{"location":"g04-server.html#g04-server-1","page":"Server logic","title":"Server-side logic","text":"","category":"section"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"Server-side logic defines how your app reacts to user input. It's really the whole point of Matte, otherwise you're just making pointless web pages. Server-side logic in Matte is 100% Julia, so it's easy to give your existing analysis a nice front-end.","category":"page"},{"location":"g04-server.html#Structure-1","page":"Server logic","title":"Structure","text":"","category":"section"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"Server side logic is all contained in a module that must be called Server, which is defined as a sub-module of your app module. This module can, of course, import other packages, modules and code.","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"The structure of Matte reactivity is this:","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"Each function in the server module represents an output variable that can be rendered in","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"your UI.","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"These server-side functions can take as inputs any variable whose name corresponds to the","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"id of an input element in your UI","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"(Image: )","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"note: Note\nMatte will update the relevant element in the UI to whatever is returned by the function. If the function returns nothing, the UI will not be updated. This is helpful if you want to avoid re-reunning a long-running computation unless certain conditions are met. See guide on long-running computations.","category":"page"},{"location":"g04-server.html#In-practice-1","page":"Server logic","title":"In practice","text":"","category":"section"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"In the UI we created in the last part, we have only one text_output which is rendering my_output. What we want the app to do is take the number the user choose with the slider (which has id = \"my_slider\"), multiply it by 10 and then show that in the UI.","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"To do that, all we need to do is define a function called my_output (which is the id our text_output in the UI is going to render) that takes a single input called my_slider.","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"Module Server\n\nfunction my_output(my_slider)\n  my_slider * 10\nend\n\nend","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"This alignment between ids in the UI and function names or argument numbers is how Matte creates relationships between UI inputs and outputs. It's a simple, but flexible model.","category":"page"},{"location":"g04-server.html#","page":"Server logic","title":"Server logic","text":"In the next two guides we'll look at incorporating more interesting outputs into your dashboards: DataFrames and Plots.","category":"page"},{"location":"g02-intro.html#The-basics-1","page":"Introduction to Matte","title":"The basics","text":"","category":"section"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Matte apps comprise three key elements:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"A module that defines the app\nA function that creates the UI\nA module that defines the server-side logic","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Matte has a simple logic: each function in the server becomes an output in the UI. You access the output from these functions by using the function name as the id for output elements in the UI. Inputs work similarly: you assign each input in the UI an id; this value can be used as an input to a function in the server module.","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Let's make this concrete with an example. Suppose we want to create an app that adds two numbers specified by our users. We define in our server module:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"function my_add(number1, number2)\n  number1 + number2\nend","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"This relationship is expressed in our app accordingly:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"(Image: )","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"number1 and number2 are the unique IDs for inputs in our UI. We access these in our function by name. The output from that calculation, called my_add in our server, is accessed by name as well, and rendered as a text_output.","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Outputs are only recalculated when (at least) one of their inputs change.","category":"page"},{"location":"g02-intro.html#Defining-an-App-module-1","page":"Introduction to Matte","title":"Defining an App module","text":"","category":"section"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"All Matte apps are defined as modules. The modules must contain three things:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"A const String called title that defines the app title.\nA function called ui that defines (and returns!) the ui\nA sub-module called server","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"You can structure this module however you like: it can be one file (like the hello_world example), or split across many. There are no restrictions on the name of the app module. The module can import packages; as with any Julia project, these just need to be added using the package manager.","category":"page"},{"location":"g02-intro.html#Running-an-app-1","page":"Introduction to Matte","title":"Running an app","text":"","category":"section"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Starting a Matte app is done using run_app. This takes the module as it's only compulsory argument.","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"By default, Matte runs asynchronously, so that you can still use the REPL while the server runs in the background. If you want to stop your app without killing your REPL, just run:","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"stop_app()","category":"page"},{"location":"g02-intro.html#A-quick-note-on-Revise-1","page":"Introduction to Matte","title":"A quick note on Revise","text":"","category":"section"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Use Revise! With Revise, you can edit your app module (if you includet it) and changes will be reflected in the running app. Otherwise, you need to redefine the module every time you make changes and re-launch your app.","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"Use Revise!","category":"page"},{"location":"g02-intro.html#","page":"Introduction to Matte","title":"Introduction to Matte","text":"In the next tutorial, we'll look at the basics of building a UI in Matte.","category":"page"},{"location":"g05b-plots.html#g05b-plots-1","page":"Plots","title":"Including plots","text":"","category":"section"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"This guide walks you through how to include a plot, created by the Plots.jl library, into your Matte app.","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"Because plots can be slow to create and show, you should also read the guide on long-running computations for tips on how to create user interfaces that only re-calculate plots when requested by the user.","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"At the moment, only plots created by Plots.jl are supported.","category":"page"},{"location":"g05b-plots.html#Example-app-1","page":"Plots","title":"Example app","text":"","category":"section"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"This part of the guide uses the built-in app called plot_example. Create a copy locally to work on by running:","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"matte_example(\"plot_example\", \"plot_example\")","category":"page"},{"location":"g05b-plots.html#Incorporating-a-Plots.jl-plot-in-your-UI-1","page":"Plots","title":"Incorporating a Plots.jl plot in your UI","text":"","category":"section"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"Incorporating a plot into your UI is as easy as using the plots_output function. This takes a single argument, which is the id of the output (which, of course, corresponds to a function in the Server module).","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"You can see this element in the main_panel of the provided example, where we have given it the id of output_plot:","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"function ui()\nsidebar_layout(\n      side_panel(\n          ...\n      ),\n      main_panel(\n          ...\n          plots_output(\"output_plot\")\n      )\n  )\nend","category":"page"},{"location":"g05b-plots.html#Plots-on-the-backend-1","page":"Plots","title":"Plots on the backend","text":"","category":"section"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"As with all Matte outputs elements, we need a function in the Server module called output_plot, since this is the id we gave to plots_output. This function should return a Plots.jl plot.","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"In the included example, we are using two input variables xvar and yvar to allow the user to pick which features of the iris dataset to plot. This isn't particularly interesting, but provides a little interactivity for the example.","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"using Plots\nusing RDatasets\niris = dataset(\"datasets\", \"iris\")\n\nfunction output_plot(xvar, yvar)\n    if typeof(xvar) <: AbstractString && typeof(yvar) <: AbstractString\n        plot(iris[!, Symbol(xvar)], iris[!, Symbol(yvar)], seriestype=:scatter)\n    end\nend","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"The first part of the function checks whether the user has made a selection for both xvar and yvar. If so, it creates the plot.","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"The key part is:","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"plot(iris[!, Symbol(xvar)], iris[!, Symbol(yvar)], seriestype=:scatter)","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"This creates a Plots.jl plot, plotting the xvar columns on the x-axis and the yvar column on the y-axis.","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"This function creates and returns a Plots.jl plot. Alternatively, if the user hasn't yet selected a distribution to draw from, the function returns nothing, which tells Matte not to update the UI. This is a helpful pattern for plots because it allows you to delay re-rendering of the plot until certain conditions are met (more on that in the next guides).","category":"page"},{"location":"g05b-plots.html#Trying-it-out-1","page":"Plots","title":"Trying it out","text":"","category":"section"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"Run the app (by include/includeting the app.jl file and running run_app(PlotsExample)). Once you select a species to filter by, you'll see something like this:","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"(Image: )","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"The plot may take a moment to show, particularly if you haven't used Plots in your session yet, as Julia has to compile Plots before it can display anything.","category":"page"},{"location":"g05b-plots.html#","page":"Plots","title":"Plots","text":"In the next two guides, we look at how to have persistent server-side variables and how to change the UI from within other functions. This is an introduction to the helpful pattern that follows in the final guide handling long-running computations","category":"page"},{"location":"g06b-side-effects.html#g06b-side-effects-1","page":"Side effects and manually updating the UI","title":"Side effects and manually changing the UI","text":"","category":"section"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"Matte's computation model means that a server function can only affect one output – the output with the same id as the function name. But what if you want to change more than one? What if your function needs to have side-effects? This is likely to happen when you have functions that change some session variable. As warned in the previous guide, session variables are not reactive – if you have multiple outputs that depends on a session variable you have to manually update them when you change the value.","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"This is where update_output comes in. update_output can be called from inside any server-side functions to manually an output variable to a new value.","category":"page"},{"location":"g06b-side-effects.html#Setting-the-scene-with-an-example-1","page":"Side effects and manually updating the UI","title":"Setting the scene with an example","text":"","category":"section"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"Let's make this problem concrete with a problem. Let's extend the app from the previous guide so that, along with displaying how many times the number has been clicked, we also combine that number with a number from a slider. The example broken_sideeffect mocks this problem up. Let's run this app and see the problem:","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"matte_example(\"broken_sideeffect\", \"broken_sideeffect\")\nincludet(\"app.jl\")\nrun_app(BrokenSideEffect)","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"Open the app, which looks like this:","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"(Image: )","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"Push the button. You'll see the first output updates, but the second one does not. If you move the slider it does, because that re-triggers the output. But the button doesn't, because Matte doesn't recognise that my_count updates session.count.","category":"page"},{"location":"g06b-side-effects.html#Fixing-the-problem-with-side-effects-1","page":"Side effects and manually updating the UI","title":"Fixing the problem with side effects","text":"","category":"section"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"We can fix this by changing how my_count works so that we explicitly and manually update the value of my_calc from within my_count:[1]","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"function my_count(my_button, slider, session)\n    if my_button\n        session.count += 1\n        update_output(\"my_calc\", slider * session.count, session)\n    end\n    session.count\nend","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"Don't forget to add using Matte to your server module, so that we can access the update_output function.","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"If you replace my_count in your app.jl file, and refresh your app, it should now work properly. Both numbers will update every time you click the button.","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"This example is obviously extremely contrived. But in the next guide we'll see a concrete useful example of when you will want to use update_output: displaying progress notifications for long-running computations.","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"[1]: Of course, for an example this simple, you could also solve the problem by having","category":"page"},{"location":"g06b-side-effects.html#","page":"Side effects and manually updating the UI","title":"Side effects and manually updating the UI","text":"my_button as an input to my_calc so that my_calc, is recomputed anytime the button is pushed. This won't always work.","category":"page"},{"location":"g06a-server-side-state.html#g06a-server-side-state-1","page":"Server-side state","title":"Server-side state","text":"","category":"section"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"So far, all our apps have had not concept of 'state'. Our server-side functions take the current value of the inputs in the UI, and return some output. Our app has no memory, no way of knowing what has happened in the past.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"But what if we want to know what happened in the past?","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"Consider a simple problem. Suppose we want to create an app that just tracks how many times the user has clicked a button, and then displays that result. With everything we've learned so far, we can't. A button input just tells the server whether it has been clicked or not: it returns only true or false.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"Enter session. session is a way for you to be able to create variables that have a value that is persistent.","category":"page"},{"location":"g06a-server-side-state.html#A-quick-example-1","page":"Server-side state","title":"A quick example","text":"","category":"section"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"To see this in action, let's create a copy of the server_state example app, which implements exactly the problem we outlined above – track how many times a button is pushed.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"matte_example(\"server_state\", \"server_state\")\nincludet(\"app.jl\")\nrun_app(ServerStateExample)","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"You'll see an app that looks something like this, and the counter on the right will increment by 1 every time your push the button. If you refresh the page (starting a new session), the counter returns to zero.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"(Image: )","category":"page"},{"location":"g06a-server-side-state.html#Step-1:-Registering-session-variables-1","page":"Server-side state","title":"Step 1: Registering session variables","text":"","category":"section"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"The first step in having persistent vars is defining or 'registering' them. Matte needs to know, in advance, the names of the variables you want to be able use. And you need to tell Matte what initial value that variable should have when the session first starts. This is done using the function register_session_vars. This function should be declared inside your app module (at the top level, like the ui function). It takes no inputs, and should return a Dict. This Dict maps symbols to values – the symbols are the variables that you will have access to.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"In our example app, we only want one variable to track – the number of times the user has pushed the button. Let's call it count and assign it a value of 0 to begin with:","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"function register_session_vars()\n    Dict(\n        :count => 0\n    )\nend","category":"page"},{"location":"g06a-server-side-state.html#Step-2:-Accessing-and-mutating-session-variables-1","page":"Server-side state","title":"Step 2: Accessing and mutating session variables","text":"","category":"section"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"These session variables are accessed slightly differently to regular inputs. Any server function that you want to have access to a persistent variable must take an argument named session as an input. You access the session variables you registered with register_session_vars using the . syntax to access the field of the session – i.e. session.my_variable etc. You can change the value of the variable simply by assigning to this field.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"In our example, we need a function that displays the current count, and that increments the count whenever my_button is pushed:","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"function my_count(my_button, session)\n    if my_button\n        session.count += 1\n    end\n    session.count\nend","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"The first conditional increments the count if my_button = true (i.e. if the button has been pushed) by setting session.count += 1.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"The final line simply returns the current value of the count, to be displayed in the app.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"note: Note\n","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"Be careful: session variables are not reactive. That means that changing the value   of a session variable in one function will not induce recomputation of any other outputs   that depend on that session variable.","category":"page"},{"location":"g06a-server-side-state.html#","page":"Server-side state","title":"Server-side state","text":"In the next guide, we'll look at an important complement to session variables: being able to change the value of other UI elements within a server-side function.","category":"page"},{"location":"g07-long-running-computations.html#g07-long-running-computations-1","page":"Dealing with long-running computations","title":"Long-running Computations","text":"","category":"section"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"This guide combines the previous two guides to provide a design pattern that is helpful for long-running computations. If you haven't read those guides, do so before continuing here.","category":"page"},{"location":"g07-long-running-computations.html#The-problem-and-set-up-1","page":"Dealing with long-running computations","title":"The problem and set up","text":"","category":"section"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Suppose we have some long-running computation. It doesn't have to be super long, but long enough that a user will notice a lag between changing inputs and outputs. Even a second is noticeable, but let's assume we have something that takes even longer – say 10 seconds.","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"The example app long_running simulates this just by using a sleep. Let's create a copy of that app and fire it up to get a sense of the problem we're dealing with:","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"matte_example(\"bad_long_running\", \"bad_long_running\")\nincludet(\"app.jl\")\nrun_app(BadLongRunningExample)","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Change one of the sliders and you'll immediately get a sense of the problem: the UI doesn't seem to work! It is, it's just taking a long time to respond. Worse still, because we're using a slider, moving the slider generates 10s of updates every time the user interacts with it – all the intermediate values that are scrolled through trigger updates too. Each update takes 10 seconds (the sleep we inserted, to simulate some complex calculation). This is intolerable as a user experience.","category":"page"},{"location":"g07-long-running-computations.html#How-to-improve-it?-1","page":"Dealing with long-running computations","title":"How to improve it?","text":"","category":"section"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Ideally, we want to make two changes:","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Avoid unnecessary intermediate calculations by only running the calculation when the","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"user is happy with their chosen inputs.","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Show the user that a calculation is taking place. Have some animation to show that the","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"result is being calculated.","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"We'll make these changes to bad_long_running in the next two steps. An example app that implements these changes is available as better_long_running.","category":"page"},{"location":"g07-long-running-computations.html#Improvement-1:-Only-calculate-when-desired-1","page":"Dealing with long-running computations","title":"Improvement 1: Only calculate when desired","text":"","category":"section"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"First, we need to add a button to our ui so that users can trigger the calculation. Let's change the side_panel of our UI to include such a button:","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"\nfunction ui()\n    sidebar_layout(\n        side_panel(\n            h1(\"Choose two numbers\"),\n            br(),\n            slider(\"slider1\", \"Number 1\", 0, 100),\n            slider(\"slider2\", \"Number 2\", 0, 100),\n            br(),\n            button(\"calculate\", \"Calculate now!\")\n        ),\n        main_panel(\n            ...\n        )\n    )\nend","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"And then we need to hook this button up to our calculation. We want to only run the calculation when the button is pushed, that is, when calculate is true","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"function my_sum(slider1, slider2, calculate)\n    if calculate\n        sleep(10)\n        slider1 + slider2\n    end\nend","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Importantly, if calculate is false, this function returns nothing. nothing has a special role in Matte. Matte will not change the UI if it receives a nothing response. This means whatever our last calculated result was will continue to be displayed, even if the user changes the sliders. Jump over to your web browser and try it out for yourself (if you are using Revise, you should only need to refresh your web browser to see the changes).","category":"page"},{"location":"g07-long-running-computations.html#Improvement-2:-Show-a-loading-animation-1","page":"Dealing with long-running computations","title":"Improvement 2: Show a loading animation","text":"","category":"section"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Showing users some visual indication that a calculation being informed will greatly improve the user experience, and discourage users from repeatedly trying to recalculate (think the app isn't working).","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"For this, we're going to need two UI elements: circular_loader and show_if.","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"The first is just a spinning wheel animation, and the second let's us conditional show that animation.","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Let's add these to the UI in the main panel:","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"sidebar_layout(\n      side_panel(\n        ...\n      ),\n      main_panel(\n          h1(\"The sum of your numbers is:\"),\n          br(),\n          text_output(\"my_sum\"),\n          show_if(\"loading\",\n            circular_loader()\n          )\n      )\n  )","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Now, our circular loader will show up anytime the server-side function loading returns true. But, wait?! What would such a function even look like – we want it to show the animation when we start our long running computation and finish when that computation is finished. We can't do that from a function!","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"This is where update_output from the guide on side effects shines. We will manually set the value of loading from inside our long-running function my_sum:","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"function my_sum(slider1, slider2, calculate, session)\n    if calculate\n        update_output(\"loading\", true, session)\n        sleep(10)\n        result = slider1 + slider2\n        update_output(\"loading\", false, session)\n        result\n    end\nend","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"(NB: Don't forget to add using Matte to your server module so that you can access the update_output function from Matte).","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"The key here is we manually set loading to true before we start our long running computation (proxied here by sleep(10)). Once that finishes, we again manually update_output for loading to set it to false – hiding our loading animation. And then we, finally, return the result of our computation.","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"Go ahead and try it out in your app. When you push the button, a circular loader pops indicating that the app is running a calculation. When it's finished, it disappears and the new sum is shown.","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"For extra credit you could even hide the previous number while the calculation is happening using a hide_if with the id of loading.","category":"page"},{"location":"g07-long-running-computations.html#","page":"Dealing with long-running computations","title":"Dealing with long-running computations","text":"This is a particularly helpful design pattern for plots, which tend to be slow to update and can make UIs feel sluggish if allowed to recompute on every change to inputs.","category":"page"},{"location":"r03-output-elements.html#r03-output-elements-1","page":"Output elements","title":"Output elements","text":"","category":"section"},{"location":"r03-output-elements.html#","page":"Output elements","title":"Output elements","text":"text_output\ndatatable_output\nplots_output","category":"page"},{"location":"r03-output-elements.html#Matte.text_output","page":"Output elements","title":"Matte.text_output","text":"text_output(id)\n\nRender the output from the server as raw text.\n\nThis is best used with a formatting tag (such as p() or heading h1() etc)\n\n\n\n\n\n","category":"function"},{"location":"r03-output-elements.html#Matte.datatable_output","page":"Output elements","title":"Matte.datatable_output","text":"datatable_output(id::AbstractString; rows_per_page::Integer\n\nRender a table of data in your UI. The function id in your Server module should return a table that is a subtype of either AbstractDataFrame or Table (from Tables.jl).\n\n\n\n\n\n","category":"function"},{"location":"r03-output-elements.html#Matte.plots_output","page":"Output elements","title":"Matte.plots_output","text":"plots_output(id)\n\nRender a plot. Supports plots created by the Plots package.\n\nPlots are slow to render, and so should not be directly hooked up to inputs that rapidly request updates to the server – like sliders. If you wish to use these input types, add a button to refresh the plot input and only return the plot when that is true (otherwise return nothing).\n\n\n\n\n\n","category":"function"},{"location":"r03-output-elements.html#Side-effects-/-manually-pushing-updates-to-the-UI-1","page":"Output elements","title":"Side effects / manually pushing updates to the UI","text":"","category":"section"},{"location":"r03-output-elements.html#","page":"Output elements","title":"Output elements","text":"update_output","category":"page"},{"location":"r03-output-elements.html#Matte.update_output","page":"Output elements","title":"Matte.update_output","text":"ui_update(id, value, session)\n\nManually update a UI variable/element id to value. Use inside server-side functions for other outputs when you want calculations to have side effects in the UI.\n\nsession is the optional session argument to server-side functions that provides stateful variables. See the guides on server-side state and side effects for more information.\n\n\n\n\n\n","category":"function"},{"location":"r03-output-elements.html#","page":"Output elements","title":"Output elements","text":"update_output is a way to manually change the value of an output variable in the UI from within the function for a different output variable. This is not the typical Matte computation model, but can be useful for logic flows like:","category":"page"},{"location":"r03-output-elements.html#","page":"Output elements","title":"Output elements","text":"Setting and unsetting loading animations for long-running computations\nCreating 'onclick' listeners for buttons that then change multiple elements","category":"page"},{"location":"r03-output-elements.html#","page":"Output elements","title":"Output elements","text":"update_output must be passed an argument called session, and that variable must be an argument to the function from within which it is called. See the guide on server-side state for more details.","category":"page"},{"location":"g03-ui.html#g03-ui-1","page":"Building UIs","title":"Building a UI","text":"","category":"section"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"UIs in Matte are declared as a function, called ui. This function contains a tuple of stuff to create your UI. But what stuff?","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"Well, there's lots. There are style elements, like HTML headings, bold text, and horizontal lines. There are input elements for your users to interact with – text fields, tick boxes, sliders, etc. There are output elements that let you display the results from server-side calculations. And there are ways to determine the layout of your app.","category":"page"},{"location":"g03-ui.html#Step-1:-Creating-a-layout-1","page":"Building UIs","title":"Step 1: Creating a layout","text":"","category":"section"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"There's a lot of options there, so let's keep things simple and concrete. Start with the hello world app, delete everything inside the body of the UI function. And then lets create a new UI that uses the layout common for dashboards – input controls on the left, main output on the right (in a larger panel). In Matte, this is called a sidebar_layout. We create one as follows (inside our app module):","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"function ui()\n  sidebar_layout(\n    side_panel(\n\n    ),\n    main_panel(\n\n    )  \n  )\nend","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"sidebar_layout is a function that takes two arguments, the left side panel and the right side panel. We've added a side_panel for the left panel, and a main_panel for the right. But both of those panels are currently blank – they are also just functions, but we haven't passed anything to them.","category":"page"},{"location":"g03-ui.html#Step-2:-Adding-some-stuff-to-the-UI-1","page":"Building UIs","title":"Step 2: Adding some stuff to the UI","text":"","category":"section"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"Let's add some content to our left side control panel. Let's add a level 1 heading h1, some text explaining what our app does, and a slider for users to interact with.","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"function ui()\n  sidebar_layout(\n    side_panel(\n      h1(\"Our First Matte App\"),\n      p(\"Hi everyone, this app doesn't do very much, but you can play with the slider below\"),\n      slider(\"my_slider\", \"Choose a number\", 0, 100)\n    ),\n    main_panel(\n\n    )  \n  )\nend","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"To add these elements, all we need to do is ... add them, with commas in between so that Julia knows you've started a new element.[1] Each of the elements is fairly self explanatory: h1 takes some text and displays it as a heading; p the same, but as a paragraph, and slider creates a new slider with id my_slider – we need this id so we can access the value on the server.","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"Let's add some elements to the main_panel too. We haven't created a Server module yet, but, for argument's sake, let's assume we have a function in our server called my_output that returns the number the user selected times 10 (we'll create this in the next guide).","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"function ui()\n  sidebar_layout(\n    side_panel(\n      h1(\"Our First Matte App\"),\n      p(\"Hi everyone, this app doesn't do very much, but you can play with the slider below\"),\n      slider(\"my_slider\", \"Choose a number\", 0, 100)\n    ),\n    main_panel(\n      h1(\"Some output\"),\n      p(\"The number you chose was: \", text_output(\"my_output\"))\n    )  \n  )\nend","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"Again, we've added a level 1 heading and a paragraph. But this time, we've added two things inside the paragraph, some static text and the text_output. text_ouput (and it's other output element friends) are how you display results from the server in your UI. I this case, text_output will renders the response as, well, text. You can also render plots from the Plots.jl package and dataframes (or and Tables.jl table) using plots_output and datatable_output respectively. See the reference guide for examples.","category":"page"},{"location":"g03-ui.html#A-quick-note-on-adding-elements-1","page":"Building UIs","title":"A quick note on adding elements","text":"","category":"section"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"Most – but not all – UI elements can contain multiple layout elements within them. That's how we are able to put a heading, paragraph and slider inside a side_panel, or a static string and a text_output inside a p. But some elements, that need to have multiple arguments cannot – for instance a sidebar_layout takes exactly two inputs: the left and right panels.","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"If you find yourself in a situation where you need to provide multiple UI elements to a multi-argument function, simply wrap the elements in parentheses (to create a tuple).","category":"page"},{"location":"g03-ui.html#Digging-deeper-1","page":"Building UIs","title":"Digging deeper","text":"","category":"section"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"There are lots of UI elements. The Matte reference is the best place to understand what is available, and how to use them. Key frequently-used elements include: number_input, text_input, button, switch, selector and plots_output.","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"In the next guide we'll look at how to create the server-side logic that drives the interactivity of a Matte app.","category":"page"},{"location":"g03-ui.html#","page":"Building UIs","title":"Building UIs","text":"[1]: Under the hood, side_panel takes a vararg tuple.","category":"page"},{"location":"g01-getting-started.html#getting-started-1","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"g01-getting-started.html#Installation-1","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"Matte is not yet registered in the julia general repository. To install the latest release run the following from the Pkg repl (type ] to get there):","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"pkg> add https://github.com/angusmoore/Matte.jl.git#v0.1.0","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"You can install the latest development version by removing the #v0.1.0.","category":"page"},{"location":"g01-getting-started.html#Creating-your-first-app-1","page":"Getting started","title":"Creating your first app","text":"","category":"section"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"Matte comes with a number of example apps to demonstrate how it works. Let's start with the hello_world example.","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"Open Julia and create a new Matte app, and populate it with the included hello_world app by running:","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"julia> using Matte\njulia> matte_example(\"hello_world\", \"path/to/example\")","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"where path/to/example is an empty folder where you want to create the new app. Matte will create a new project at that location. Change your working directory to that location:","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"julia> cd(\"path/to/example\")","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"and open up the folder in your favourite editor. There are two files that Matte has created: app.jl and a Project.toml.  Project.toml is a standard project file for Julia's package manager, for specifying your app's dependencies. app.jl (unsurprisingly!) is the app. It defines the server-side logic, and the UI. Open that file in your favourite editor. It should look like this:","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"module HelloWorldApp\n\nusing Matte\n\nconst title = \"Hello World\"\n\nfunction ui()\n    sidebar_layout(\n        side_panel(\n            h1(\"Hello World!\"),\n            text_input(\"my_input\", \"Input some text\")\n        ),\n        main_panel(\n            h1(\"You wrote:\"),\n            p(text_output(\"my_output\"))\n        )\n    )\nend\n\nmodule Server\n\nfunction my_output(my_input)\n    my_input\nend\n\nend\n\nend","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"The next guide will dig in to what makes a Matte app and how they work. But before we do that, let's run the app. First we need to activate the project, and load Revise (so that can make changes to our app without having to restart. You don't have to use Revise. But you should!):","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"pkg> activate .\njulia> using Revise\njulia> includet(\"hello_world.app\")\njulia> run_app(HelloWorldApp)","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"Open your favourite web browser and visit http://localhost:8000. After a few seconds you should see a simple webpage that looks like this: (Image: Hello world screenshot)","category":"page"},{"location":"g01-getting-started.html#","page":"Getting started","title":"Getting started","text":"You can type some text on the left, and it will appear on the right. Not very exciting, but it's our first Matte app!","category":"page"},{"location":"index.html#Matte-1","page":"Matte","title":"Matte","text":"","category":"section"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Matte is a julia library for creating julia-powered dashboards, inspired by Google's material design. Matte makes it easy to convert your existing julia code into a beautiful and powerful dashboard for end users. Matte is easy to use, fast, and powerful.","category":"page"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Please note: Matte is new and is still highly experimental.","category":"page"},{"location":"index.html#","page":"Matte","title":"Matte","text":"(Image: )","category":"page"},{"location":"index.html#Examples-1","page":"Matte","title":"Examples","text":"","category":"section"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Create an app for interactive plotting","category":"page"},{"location":"index.html#","page":"Matte","title":"Matte","text":"(NB: Examples are temporarily hosted, and may not be available from time-to-time).","category":"page"},{"location":"index.html#Support,-bugs,-and-planned-features-1","page":"Matte","title":"Support, bugs, & planned features","text":"","category":"section"},{"location":"index.html#","page":"Matte","title":"Matte","text":"General support for help with usage and troubleshooting is best directed to the julialang discourse.","category":"page"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Please report any bugs you find on the github issue tracker. Feature requests can be logged there too.","category":"page"},{"location":"index.html#Acknowledgements-1","page":"Matte","title":"Acknowledgements","text":"","category":"section"},{"location":"index.html#","page":"Matte","title":"Matte","text":"Matte is made possible by a range of excellent julia and javascript open source libraries. Of particular note: Genie.jl, Vuetify and Vue.js.","category":"page"},{"location":"r02-input-elements.html#r02-input-elements-1","page":"Input elements","title":"Input elements","text":"","category":"section"},{"location":"r02-input-elements.html#Text-input-1","page":"Input elements","title":"Text input","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"text_input","category":"page"},{"location":"r02-input-elements.html#Matte.text_input","page":"Input elements","title":"Matte.text_input","text":"text_input(id, label; default = \"\")\n\nFree text field for string input by users\n\nNote that a text input always returns a String to the server. If you need users to be able to freely enter a number, use number_input.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Numeric-inputs-1","page":"Input elements","title":"Numeric inputs","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"number_input\nslider","category":"page"},{"location":"r02-input-elements.html#Matte.number_input","page":"Input elements","title":"Matte.number_input","text":"number_input(id, label; default = 0)\n\nForm input that only accepts numbers\n\nNote that number_input always returns a float to the server. If you need a string use text_input. If you need integers, you can use a slider or round the result.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.slider","page":"Input elements","title":"Matte.slider","text":"slider(id, label, min, max; default = Int(round((max + min) / 2))\n\nInput element that allows users to select among a set of integers using a slider\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"number_input provides more flexibility, as sliders can only offer integers.","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"note: Note\nnumber_input will return an empty string if the user deletes all of the digits in the input box. This may cause your server-side functions to fail if they assume a number will be returned.","category":"page"},{"location":"r02-input-elements.html#Selecting-among-options-1","page":"Input elements","title":"Selecting among options","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"selector\nradio\nswitch\ncheckbox\nlist\nlist_item\nbutton_group","category":"page"},{"location":"r02-input-elements.html#Matte.selector","page":"Input elements","title":"Matte.selector","text":"function selector(id, label, items; multiple = false, autocomplete = false)\n\nCreate a selection box in your UI for users to choose among options. Allow multiple selections with multiple. Let users type in the box to filter options by setting autocomplete to true. items can either be a string for a static (javascript) array of options (i.e. \"['a first option', 'the second option']\") or an id that corresponds to a function in your Server that returns an array of options (potentially dynamically).\n\nReturns either an Array (if no or multiple elements are selected) or the type of the individual element if only one is selected. The type that is returned depends on the types of the elements in the select list.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.radio","page":"Input elements","title":"Matte.radio","text":"radio(id, values, labels)\n\nGive users a set of options to choose from (exclusively).\n\nUnlike a select, all radio options are displayed (not a drop down list), and cannot be dynamic.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.switch","page":"Input elements","title":"Matte.switch","text":"switch(id, label; default = false)\n\nAdd a switch that returns true or false based on whether it is turned on.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.checkbox","page":"Input elements","title":"Matte.checkbox","text":"checkbox(id, label; default = false)\n\nAdd a checkbox that returns true or false based on whether it is ticked.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.list","page":"Input elements","title":"Matte.list","text":"function list(id, items...; title = nothing)\n\nCreate a list of items for users to choose from. items... should be populated with list_items.\n\ntitle is optional; if specified it provides a grey title at the top of the list.\n\nThe selected list item is returned to the server as a zero-based index.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.list_item","page":"Input elements","title":"Matte.list_item","text":"list_item(title, subtitle = nothing)\n\nShould only be used as part of a list\n\nsubtitle is optional. It provides more detail in a smaller font beneath the main item.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.button_group","page":"Input elements","title":"Matte.button_group","text":"button_group(id, buttons...)\n\nGroup together a set of buttons to provide radio-like exclusive selections.\n\nThe list of buttons given as input should only contain buttons. The number (0-based index) of the selected button is returned to the server. A selection is mandatory and exclusive.\n\nComponent buttons can still have their own ids and will still tell the server when they are pushed.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Dynamically-setting-the-options-in-a-selector-1","page":"Input elements","title":"Dynamically setting the options in a selector","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"By setting the item argument to an id, Matte will fetch the items from the server. This can be used to create dynamic selections, where the options in the list depend on the values of other inputs. The example dynamic_select shows how this works (create it by running matte_example(\"dynamic_select\")).","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"In the UI, we define a selector, which has items defined by dynamic_items:","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"selector(\"main_select\", \"Choose a subgroup\", \"dynamic_items\")","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"And we define another selector called first_select that will determine what shows up in dynamic_items, but has static options:","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"selector(\"first_select\", \"Select First Option:\", \"['Group #1', 'Group #2']\")","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"We then define a function in the Server module in the app called dynamic_items","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"function dynamic_items(first_select)\n  if (first_select == \"Group #1\")\n    [\"Subgroup 1.$i\" for i in 1:10]\n  elseif (first_select == \"Group #2\")\n    [\"Subgroup 2.$i\" for i in 1:10]\n  else\n    [\"No group selected\"]\n  end\nend","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"Now, when users make a selection of a group in the first selector, the options in the second select will reflect that choice.","category":"page"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"This pattern can be applied to create complex chains of dependent selectors.","category":"page"},{"location":"r02-input-elements.html#Dates-and-times-1","page":"Input elements","title":"Dates and times","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"date_picker\ntime_picker","category":"page"},{"location":"r02-input-elements.html#Matte.date_picker","page":"Input elements","title":"Matte.date_picker","text":"date_picker(id::AbstractString; color::AbstractString = \"primary\")\n\nAdd a date picker to your UI. Date is returned as a String in ISO 8601 form (YYYY-MM-DD)\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.time_picker","page":"Input elements","title":"Matte.time_picker","text":"time_picker(id; color = \"primary\", default = nothing)\n\nAdd a clock time picker to your UI. Time is returned as a String, in HH:MM 24 hour format. Returns nothing if user has not yet picked a time.\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Buttons-1","page":"Input elements","title":"Buttons","text":"","category":"section"},{"location":"r02-input-elements.html#","page":"Input elements","title":"Input elements","text":"floating_action_button\nbutton","category":"page"},{"location":"r02-input-elements.html#Matte.floating_action_button","page":"Input elements","title":"Matte.floating_action_button","text":"floating_action_button(id, label; location = \"bottom right\", color = \"red\")\n\nAdd a floating action button to your UI at location\n\n\n\n\n\n","category":"function"},{"location":"r02-input-elements.html#Matte.button","page":"Input elements","title":"Matte.button","text":"button(id, label; color, size)\n\nAdd a button to a UI. Buttons return true to the server when clicked, and false otherwise.\n\nsize can be one of x-small, small, normal, large, x-large color can be any valid color (see docs on colors for a full list) - e.g. primary, error, teal etc\n\n\n\n\n\n","category":"function"}]
}
